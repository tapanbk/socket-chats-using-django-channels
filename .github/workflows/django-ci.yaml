name: Django Docker github actions
on:
  push:
    branches: [ master ]
jobs:
  build:
    name: Build image
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Make Environment file
      run: |      
        touch .env
        echo GITHUB_WORKFLOW=True >> .env
        echo PROJECT_NAME="Socket Django channels" >> .env
        echo DEBUG=True >> .env
        echo ALLOWED_HOSTS=* >> .env
        echo DJANGO_CORS_ORIGIN_ALLOW_ALL=True >> .env
        echo DJANGO_DB_ENGINE="django.db.backends.postgresql" >> .env
        echo SECRET_KEY="django-insecure-t=q3r)r6mi93#qk&+x(!q7y7)m^_thr2shcedb*$t4$u#4m$1t" >> .env
        echo DB_NAME=postgres >> .env
        echo DB_USER=postgres >> .env
        echo DB_PASSWORD=postgres >> .env
        echo DB_HOST=db >> .env
        echo DB_PORT=5432 >> .env
    - name: Build containers
      run: |
        docker-compose -f docker-compose.yml build --no-cache
    - name: Run containers
      run: |
        docker-compose -f docker-compose.yml up -d
#    - name: Wait for containers to start
#      run: sleep 10
#    - name: Make migrations and migrate database
#      run: |
#        docker-compose exec -T api python manage.py makemigrations  || true
#        docker-compose exec -T api python manage.py migrate || true
#    - name: Run test
#      run: |
#        docker-compose  exec -T  api python manage.py test --keepdb || true
    - name: Run test cases
      run: |
        docker-compose exec -i api python manage.py test --keepdb
#    - name: Display Docker Compose Logs
#      run: |
#        docker-compose logs
#    - name: Stop and remove containers
#      run: |
#        docker-compose -f docker-compose.yml down

#  deploy:
#    name: Deploy to EC2
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the files
#        uses: actions/checkout@v2
#      - name: Deploy to Server 1
#        uses: easingthemes/ssh-deploy@main
#        env:
#          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
#          REMOTE_HOST: ${{ secrets.HOST_DNS }}
#          REMOTE_USER: ${{ secrets.USERNAME }}
#          TARGET: ${{ secrets.TARGET_DIR }}