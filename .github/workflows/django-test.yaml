name: Example CI Django + Postgres Tests

# Controls when the workflow will run
on:
  # Allows you to call this workflow within another workflow
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggered based on the git event type
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Add in environment variables for the entire "build" job
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost # default host value for the database
      POSTGRES_DB: djtesting
      POSTGRES_PORT: 5432
      DJANGO_SECRET_KEY: test-key-not-good
    strategy:
      matrix:
        python-version: ["3.9"] # ["3.8", "3.9", "3.10"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: |
          pip install -r requirements.txt
      - name: "Make envfile"
        run: |
          touch .env
          echo PROJECT_NAME=Socket Django channels >> .env
          echo DEBUG=True >> .env
          echo SECRET_KEY="django-insecure-t=q3r)r6mi93#qk&+x(!q7y7)m^_thr2shcedb*$t4$u#4m$1t" >> .env
          echo ALLOWED_HOSTS=127.0.0.1,127.0.0.1:8000 >> .env
          echo DJANGO_CORS_ORIGIN_ALLOW_ALL=True >> .env
          echo DJANGO_DB_ENGINE=django.db.backends.postgresql >> .env
          echo DJANGO_DATABASE_NAME=postgres >> .env
          echo DJANGO_DATABASE_USER=postgres >> .env
          echo DJANGO_DATABASE_PASSWORD=postgres >> .env
          echo DJANGO_DB_HOST=localhost >> .env
          echo DJANGO_DB_PORT=5432 >> .env
      - name: "Build the Docker image (Demo)"
        run: docker compose  -f demo-docker-compose.yml build --no-cache
      - name: "Build the stack"
        run: |
          docker compose  -f demo-docker-compose.yml up -d
          docker rmi -f $(docker images -f "dangling=true" -q) || true
      - name: "Migrate Database"
        run: |
           python manage.py migrate
      - name: "Run test"
        run: |
          python manage.py test
